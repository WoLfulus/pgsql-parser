{"version":3,"sources":["../src/types.js"],"names":["fail","type","node","Error","JSON","stringify","LIBPG_ENUMS","require","createTypeFromEnums","values","reduce","m","v","i","name","OBJECT_TYPES","VARIABLESET_TYPES","GRANTTARGET_TYPES","GRANTOBJECT_TYPES","CONSTRAINT_TYPES","ROLESTMT_TYPES","ROLESPEC_TYPES","TRANSACTIONSTMT_TYPES","SORTBYDIR_TYPES","SORTBYNULLS_TYPES","TYPE_NAMES","OBJECT_ACCESS_METHOD","OBJECT_AGGREGATE","OBJECT_CAST","OBJECT_COLUMN","OBJECT_COLLATION","OBJECT_CONVERSION","OBJECT_DATABASE","OBJECT_DOMAIN","OBJECT_DOMCONSTRAINT","OBJECT_EXTENSION","OBJECT_FDW","OBJECT_FOREIGN_SERVER","OBJECT_FOREIGN_TABLE","OBJECT_FUNCTION","OBJECT_INDEX","OBJECT_LANGUAGE","OBJECT_LARGEOBJECT","OBJECT_MATVIEW","OBJECT_OPCLASS","OBJECT_OPERATOR","OBJECT_OPFAMILY","OBJECT_POLICY","OBJECT_ROLE","OBJECT_RULE","OBJECT_SCHEMA","OBJECT_SEQUENCE","OBJECT_STATISTIC_EXT","OBJECT_TABCONSTRAINT","OBJECT_TABLE","OBJECT_TABLESPACE","OBJECT_TRANSFORM","OBJECT_TRIGGER","OBJECT_TSCONFIGURATION","OBJECT_TSDICTIONARY","OBJECT_TSPARSER","OBJECT_TSTEMPLATE","OBJECT_TYPE","OBJECT_VIEW","_TYPE_VALUES","Object","_TYPE_KEYS","keys","objtypeIs","objtype","objtypeName","arg","indexOf","getConstraintFromConstrType","CONSTR_NULL","CONSTR_NOTNULL","CONSTR_DEFAULT","CONSTR_CHECK","CONSTR_PRIMARY","CONSTR_UNIQUE","CONSTR_EXCLUSION","CONSTR_FOREIGN","CONSTR_IDENTITY","CONSTR_ATTR_DEFERRABLE","CONSTR_ATTR_NOT_DEFERRABLE","CONSTR_ATTR_DEFERRED","CONSTR_ATTR_IMMEDIATE"],"mappings":"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","file":"types.js","sourcesContent":["import { format } from 'util';\nconst fail = (type, node) => {\n  throw new Error(format('Unhandled %s node: %s', type, JSON.stringify(node)));\n};\nconst LIBPG_ENUMS = require('./libpg_enums');\n\nexport const createTypeFromEnums = (type) =>\n  LIBPG_ENUMS['nodes/parsenodes'][type].values.reduce((m, v, i) => {\n    if (i === 0) {\n      return m;\n    } // skip first noop\n    m[v.name] = i - 1;\n    // m[i - 1] = v.name; // for reverse lookup\n    return m;\n  }, {});\n\nexport const OBJECT_TYPES = createTypeFromEnums('ObjectType');\nexport const VARIABLESET_TYPES = createTypeFromEnums('VariableSetKind');\nexport const GRANTTARGET_TYPES = createTypeFromEnums('GrantTargetType');\nexport const GRANTOBJECT_TYPES = createTypeFromEnums('GrantObjectType');\nexport const CONSTRAINT_TYPES = createTypeFromEnums('ConstrType');\nexport const ROLESTMT_TYPES = createTypeFromEnums('RoleStmtType');\nexport const ROLESPEC_TYPES = createTypeFromEnums('RoleSpecType');\nexport const TRANSACTIONSTMT_TYPES = createTypeFromEnums('TransactionStmtKind');\nexport const SORTBYDIR_TYPES = createTypeFromEnums('SortByDir');\nexport const SORTBYNULLS_TYPES = createTypeFromEnums('SortByNulls');\n\nexport const TYPE_NAMES = {\n  OBJECT_ACCESS_METHOD: 'ACCESS METHOD',\n  OBJECT_AGGREGATE: 'AGGREGATE',\n  OBJECT_CAST: 'CAST',\n  OBJECT_COLUMN: 'COLUMN',\n  OBJECT_COLLATION: 'COLLATION',\n  OBJECT_CONVERSION: 'CONVERSION',\n  OBJECT_DATABASE: 'DATABASE',\n  OBJECT_DOMAIN: 'DOMAIN',\n  OBJECT_DOMCONSTRAINT: 'CONSTRAINT',\n  OBJECT_EXTENSION: 'EXTENSION',\n  OBJECT_FDW: 'FOREIGN DATA WRAPPER',\n  OBJECT_FOREIGN_SERVER: 'SERVER',\n  OBJECT_FOREIGN_TABLE: 'FOREIGN TABLE',\n  OBJECT_FUNCTION: 'FUNCTION',\n  OBJECT_INDEX: 'INDEX',\n  OBJECT_LANGUAGE: 'LANGUAGE',\n  OBJECT_LARGEOBJECT: 'LARGE OBJECT',\n  OBJECT_MATVIEW: 'MATERIALIZED VIEW',\n  OBJECT_OPCLASS: 'OPERATOR CLASS',\n  OBJECT_OPERATOR: 'OPERATOR',\n  OBJECT_OPFAMILY: 'OPERATOR FAMILY',\n  OBJECT_POLICY: 'POLICY',\n  OBJECT_ROLE: 'ROLE',\n  OBJECT_RULE: 'RULE',\n  OBJECT_SCHEMA: 'SCHEMA',\n  OBJECT_SEQUENCE: 'SEQUENCE',\n  OBJECT_STATISTIC_EXT: 'STATISTICS',\n  OBJECT_TABCONSTRAINT: 'CONSTRAINT',\n  OBJECT_TABLE: 'TABLE',\n  OBJECT_TABLESPACE: 'TABLESPACE',\n  OBJECT_TRANSFORM: 'TRANSFORM',\n  OBJECT_TRIGGER: 'TRIGGER',\n  OBJECT_TSCONFIGURATION: 'TEXT SEARCH CONFIGURATION',\n  OBJECT_TSDICTIONARY: 'TEXT SEARCH DICTIONARY',\n  OBJECT_TSPARSER: 'TEXT SEARCH PARSER',\n  OBJECT_TSTEMPLATE: 'TEXT SEARCH TEMPLATE',\n  OBJECT_TYPE: 'TYPE',\n  OBJECT_VIEW: 'VIEW'\n};\n\nconst _TYPE_VALUES = Object.values(OBJECT_TYPES);\nconst _TYPE_KEYS = Object.keys(OBJECT_TYPES);\n\nexport const objtypeIs = (objtype, name) =>\n  OBJECT_TYPES[name] === objtype;\n\nexport const objtypeName = (arg) => {\n  if (typeof arg === 'string') {\n    return (TYPE_NAMES[arg]);\n  }\n  return TYPE_NAMES[_TYPE_KEYS[_TYPE_VALUES.indexOf(arg)]];\n};\n\nexport const getConstraintFromConstrType = (type) => {\n  switch (type) {\n    case CONSTRAINT_TYPES.CONSTR_NULL:\n      return 'NULL';\n    case CONSTRAINT_TYPES.CONSTR_NOTNULL:\n      return 'NOT NULL';\n    case CONSTRAINT_TYPES.CONSTR_DEFAULT:\n      return 'DEFAULT';\n    case CONSTRAINT_TYPES.CONSTR_CHECK:\n      return 'CHECK';\n    case CONSTRAINT_TYPES.CONSTR_PRIMARY:\n      return 'PRIMARY KEY';\n    case CONSTRAINT_TYPES.CONSTR_UNIQUE:\n      return 'UNIQUE';\n    case CONSTRAINT_TYPES.CONSTR_EXCLUSION:\n      return 'EXCLUDE';\n    case CONSTRAINT_TYPES.CONSTR_FOREIGN:\n      return 'REFERENCES';\n\n    case CONSTRAINT_TYPES.CONSTR_IDENTITY:\n    case CONSTRAINT_TYPES.CONSTR_ATTR_DEFERRABLE:\n    case CONSTRAINT_TYPES.CONSTR_ATTR_NOT_DEFERRABLE:\n    case CONSTRAINT_TYPES.CONSTR_ATTR_DEFERRED:\n    case CONSTRAINT_TYPES.CONSTR_ATTR_IMMEDIATE:\n    default:\n      return fail(type, 'ConstrType');\n  }\n};\n"]}